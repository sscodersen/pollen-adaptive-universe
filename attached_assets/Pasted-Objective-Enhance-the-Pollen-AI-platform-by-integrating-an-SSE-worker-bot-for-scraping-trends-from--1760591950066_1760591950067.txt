Objective: Enhance the Pollen AI platform by integrating an SSE worker bot for scraping trends from Exploding Topics, creating posts based on a Bento News-type algorithm, and optimizing the overall platform design and features for deployment on Vercel.

Tasks:

SSE Worker Bot for Scraping Trends:
Bot Development:
Create an SSE worker bot that acts as a scraper to fetch real-time trends from Exploding Topics. This bot should continuously scrape data and hand it off to the Pollen AI model for processing.
Ensure the bot can handle multiple concurrent connections and provide real-time updates.
Example implementation:
python
import asyncio
import aiohttp
from sse_starlette.sse import EventSourceResponse

async def fetch_trends():
    async with aiohttp.ClientSession() as session:
        async with session.get('https://api.explodingtopics.com/v1/trends') as response:
            return await response.json()

async def trends_stream():
    while True:
        trends = await fetch_trends()
        yield {
            "event": "trend_update",
            "data": trends
        }
        await asyncio.sleep(60)  # Fetch trends every 60 seconds

async def main():
    app = FastAPI()
    @app.get("/trends/stream")
    async def get_trends_stream():
        return EventSourceResponse(trends_stream())
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    asyncio.run(main())
Integrating with Pollen AI:
Ensure that the fetched trends are handed off to the Pollen AI model for generating relevant posts.
Example:
python
from models.base_model import PollenModel

model = PollenModel()

def generate_post_from_trend(trend):
    prompt = f"Generate a post about the trending topic: {trend}"
    response = model.generate_response(prompt)
    return response

trend = "New AI advancements in 2025"
post = generate_post_from_trend(trend)
print(post)
Bento News-Type Algorithm for Post Generation:
Algorithm Development:
Check if the existing trends/posts generating algorithm is still available in the codebase. If so, expand and enhance it if no build one to generate continuous posts and features as currently built for various categories such as news, wellness tips, products, apps, entertainment, music, etc.
Ensure the algorithm can fetch data from multiple sources like explodingtopics.com, process it, and generate relevant posts.


Integrating with Pollen AI:
Use Pollen AI to enhance the generated posts by providing personalized and context-aware content.
Example:
python
from models.base_model import PollenModel

model = PollenModel()

def generate_post(category, data):
    prompt = f"Generate a post about {category} based on the following data: {data}"
    response = model.generate_response(prompt)
    return response

post = generate_post('technology', 'New AI advancements in 2025')
print(post)
Platform and Design Optimization:
Code Organization:
Refactor /optimize our code to follow best practices for modularity and maintainability. Ensure that each component has a single responsibility and that the code is well-documented / structured
Performance Improvements:
Implement caching strategies for frequently accessed data to reduce database load and improve response times.
Optimize database queries and ensure that indexes are properly set up.
Use asynchronous programming where appropriate to handle I/O-bound tasks efficiently.
Deployment and Monitoring:
Vercel Deployment:
Ensure that the application has everything in the code to be ready to be deployed on Vercel